package main

import (
	"errors"
	"fmt"
	"log"
	"sort"
)

/*Реализовать бинарный поиск встроенными методами языка.*/

func main() {
	arr := []int{5, 1, 8, 12, 34, 3, 63, 25, 645, 23, 865, 45, 324, 563, 546, 234}
	// алгоритм бинарного поиска подразумевает заранее отсортированный массив
	// воспользуемся пакетом sort

	sort.Slice(arr, func(i, j int) bool { return arr[i] < arr[j] })
	// на выходе получаем отсортированный массив

	count, err := binSearch(arr, 865) // запускаем поиск
	if err != nil {
		log.Fatalln(err) // в случае ошибки выводится сообщение о ненахождении значения в переменной
	}

	fmt.Println("Результат найден, ", count)
}

func binSearch(arr []int, sCount int) (int, error) {
	min := 0            // задаем минимальное значени
	max := len(arr) - 1 // задаем максмимальное значение, равное длине массива

	for max >= min { // цикл работает пока максимальное значение больше либо равно минимальному
		avg := (min + max) / 2  // вычисляем середину
		if sCount == arr[avg] { // если значение поиска равно центральному элементу возращаем его
			return arr[avg], nil
		} else if sCount > arr[avg] {
			// если значение поиска больше значения в переменной
			// то присваиваем переменной min значение avg + 1
			// и далее поиск продолжается во второй части массива
			min = avg + 1
		} else if sCount < arr[avg] {
			// с точьностью наоборот предыдущему условию if
			max = avg - 1
		}
	}

	// если ничего не найдено возращаем ноль и ошибку
	return 0, errors.New("числа в массиве нет")
}
